name: Deploy CA-ERP-Backend to AWS Lightsail

on:
  push:
    paths:
      - "backend/**"
      - ".github/workflows/backend.yml"
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [20.x]

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPOSITORY: ca-erp
      IMAGE_TAG: latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker image
        id: build-and-push-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ca-erp
          IMAGE_TAG: latest

        run: |
          docker build -t ${{env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} \
          -f ./backend/Dockerfile ./backend
          docker push ${{env.ECR_REGISTRY}}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - name: Deploy to Lightsail
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ca-erp
          IMAGE_TAG: latest
          LIGHTSAIL_INSTANCE_IP: ${{ secrets.LIGHTSAIL_HOST }}
          SSH_KEY: ${{ secrets.LIGHTSAIL_KEY }}
          USERNAME: ${{ secrets.LIGHTSAIL_USER }}
          PORT: 5001
          CONTAINER_NAME: CA_ERP_BACKEND
          ENV_FILE_PATH: /home/ubuntu/ca-erp/.env/.env.production

        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.LIGHTSAIL_INSTANCE_IP }}
          username: ${{ env.USERNAME }}
          key: ${{ env.SSH_KEY }}

          script: |
            set -e
            echo "Starting deployment process..."

            # Ensure Docker is installed
            if ! command -v docker &> /dev/null; then
              echo "Installing Docker..."
              sudo apt-get update
              sudo apt-get install -y docker.io
            else
              echo "Docker is already installed"
            fi

            # Install AWS CLI if not installed
            if ! command -v aws &> /dev/null; then
              echo "Installing AWS CLI..."
              curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
              sudo apt-get install -y unzip
              unzip -q awscliv2.zip
              sudo ./aws/install
              rm -rf aws awscliv2.zip
            else
              echo "AWS CLI is already installed"
            fi

            # Configure AWS credentials
            mkdir -p ~/.aws
            echo "[default]" > ~/.aws/credentials
            echo "aws_access_key_id = ${{ env.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
            echo "aws_secret_access_key = ${{ env.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials
            echo "region = ${{ env.AWS_REGION }}" >> ~/.aws/credentials
            chmod 600 ~/.aws/credentials

            # Login to Amazon ECR (use AWS CLI v2 method)
            echo "Logging into Amazon ECR..."
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}

            # Pull Docker Image
            echo "Pulling latest Docker image..."
            sudo docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

            # Stop and remove the existing container if running
            echo "Cleaning up existing container..."
            sudo docker stop ${{ env.CONTAINER_NAME }} || true
            sudo docker rm ${{ env.CONTAINER_NAME }} || true

            # Check if the .env.production file exists
            if [ ! -f "${{ env.ENV_FILE_PATH }}" ]; then
              echo ".env.production file is missing at ${{ env.ENV_FILE_PATH }}."
              exit 1
            fi

            # Run the new container with the .env.production file
            echo "Starting new container..."
            sudo docker run -d \
              -p ${{ env.PORT }}:${{ env.PORT }} \
              --restart always \
              --name ${{ env.CONTAINER_NAME }} \
              --env-file ${{ env.ENV_FILE_PATH }} \
              ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

            # Verify the container is running
            echo "Verifying deployment..."
            if sudo docker ps | grep -q "${{ env.CONTAINER_NAME }}"; then
              echo "✅ Deployment successful! Container is running."
              sudo docker logs ${{ env.CONTAINER_NAME }} --tail 10
            else
              echo "❌ Deployment failed! Container is not running."
              sudo docker logs ${{ env.CONTAINER_NAME }} --tail 20 || true
              exit 1
            fi
