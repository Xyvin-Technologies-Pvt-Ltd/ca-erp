name: Backend Deployment

on:
  push:
    paths:
      - "backend/**"
      - ".github/workflows/backend.yml"
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy-backend:
    name: Deploy Backend to AWS Lightsail
    runs-on: ubuntu-latest

    env:
      LIGHTSAIL_INSTANCE_IP: ${{ secrets.LIGHTSAIL_HOST }}
      SSH_KEY: ${{ secrets.LIGHTSAIL_KEY }}
      USERNAME: ${{ secrets.LIGHTSAIL_USER }}
      PROJECT_DIR: ca-erp
      ENV_FILE_PATH: /home/ubuntu/ca-erp-backend/.env/.env.production
      APP_NAME: ca-erp-backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "backend/package-lock.json"

      - name: Install dependencies
        working-directory: ./backend
        run: npm ci

      - name: Deploy to AWS Lightsail
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.LIGHTSAIL_INSTANCE_IP }}
          username: ${{ env.USERNAME }}
          key: ${{ env.SSH_KEY }}
          script: |
            set -e
            echo "üöÄ Starting deployment process..."

            # Ensure required tools are installed
            echo "‚úÖ Verifying environment dependencies..."
            node -v || { echo "‚ùå Node.js not found"; exit 1; }
            npm -v || { echo "‚ùå npm not found"; exit 1; }

            # Install or update PM2
            echo "‚úÖ Checking PM2 installation..."
            if ! command -v pm2 &> /dev/null; then
              echo "üì¶ Installing PM2 globally..."
              sudo npm install -g pm2
            else
              echo "üì¶ Updating PM2 globally..."
              sudo npm update -g pm2
            fi

            # Create backup of current deployment
            if [ -d "${{ env.PROJECT_DIR }}" ]; then
              echo "üíæ Creating backup of current deployment..."
              BACKUP_DIR="${{ env.PROJECT_DIR }}_backup_$(date +%Y%m%d_%H%M%S)"
              cp -r ${{ env.PROJECT_DIR }} $BACKUP_DIR
            fi

            # Clone or update repository
            echo "üì• Fetching latest code..."
            if [ -d "${{ env.PROJECT_DIR }}" ]; then
              cd ${{ env.PROJECT_DIR }}
              git fetch --all
              git reset --hard origin/main
            else
              git clone https://oauth2:${{ secrets.GH_PAT }}@github.com/${{ github.repository }} ${{ env.PROJECT_DIR }}
              cd ${{ env.PROJECT_DIR }}
            fi

            # Install dependencies
            echo "üì¶ Installing backend dependencies..."
            cd backend
            npm ci --production

            # Environment setup
            echo "üîß Setting up environment variables..."
            if [ -f "${{ env.ENV_FILE_PATH }}" ]; then
              cp ${{ env.ENV_FILE_PATH }} .env
            else
              echo "‚ùå .env file missing at ${{ env.ENV_FILE_PATH }}"
              echo "üîÑ Restoring from backup..."
              if [ -d "$BACKUP_DIR" ]; then
                rm -rf ${{ env.PROJECT_DIR }}
                mv $BACKUP_DIR ${{ env.PROJECT_DIR }}
              fi
              exit 1
            fi

            # Application deployment
            echo "üöÄ Restarting application with PM2..."
            pm2 delete ${{ env.APP_NAME }} || true
            pm2 start npm --name ${{ env.APP_NAME }} -- run start
            pm2 save

            # Verify deployment
            echo "‚úÖ Verifying deployment..."
            sleep 5
            if pm2 status | grep -q "${{ env.APP_NAME }}" && pm2 status | grep -q "online"; then
              echo "‚úÖ Deployment successful!"
            else
              echo "‚ùå Deployment verification failed!"
              echo "üîÑ Restoring from backup..."
              if [ -d "$BACKUP_DIR" ]; then
                rm -rf ${{ env.PROJECT_DIR }}
                mv $BACKUP_DIR ${{ env.PROJECT_DIR }}
                cd ${{ env.PROJECT_DIR }}/backend
                pm2 restart ${{ env.APP_NAME }} || pm2 start npm --name ${{ env.APP_NAME }} -- run start
                pm2 save
              fi
              exit 1
            fi

      - name: Verify deployment
        uses: appleboy/ssh-action@master
        with:
          host: ${{ env.LIGHTSAIL_INSTANCE_IP }}
          username: ${{ env.USERNAME }}
          key: ${{ env.SSH_KEY }}
          script: |
            echo "üîç Checking application status..."
            pm2 status
            echo "üìã Checking application logs (last 10 lines)..."
            pm2 logs ${{ env.APP_NAME }} --lines 10 || true
